mutate(Total=Hits+Misses,
Accuracy_Total= (Hits/Total)*100) %>%
select(ID, Hemifield, Accuracy_Total) %>%
spread(Hemifield, Accuracy_Total) %>%
rename(Accuracy_Left = Left,
Accuracy_Right = Right) %>%
mutate(Accuracy_Asym =  #Negitive is better accuracy for left targets, positive is better accuracy for right targets:
(Accuracy_Right-Accuracy_Left)/(Accuracy_Right+Accuracy_Left))
#merge Accuracy by hemifield in with in overall accuracy
Accuracy_checker <- merge(Accuracy_checker, Accuracy_checker_Hemifield, by.x = "ID", by.y = "ID")
rm(Accuracy_checker_Hemifield)
#Remove RejectedTrial (with eeg trigger conflicts)
#trials where RT longer than 1500ms (i.e. after target finished)
#or RT faster than 150ms (i.e. too fast must be false alarm)
data<-filter(data, RT<2000, RT>200, !-RejectedTrial)
############################################ Log transform:
data$log_RT<-log(data$RT) #log
data$sqrt_RT<-sqrt(data$RT)
ggplot(data, aes(RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
ggplot(data, aes(log_RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
ggplot(data, aes(sqrt_RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
ggplot(data, aes(RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ ID)
#####Z-score each participant's log_RT data ####
data$IDbyITIbyHemifield<-interaction(data$ID, data$ITI, data$Hemifield)
#calculate mean and sd
m <- tapply(data$log_RT,data$IDbyITIbyHemifield,mean, na.rm = T)
s <- tapply(data$log_RT,data$IDbyITIbyHemifield,sd, na.rm = T)
#calculate log_RT.Z and save it inside data.frame
data$log_RT.Z <- (data$log_RT-m[data$IDbyITIbyHemifield])/s[data$IDbyITIbyHemifield]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,] #this is for individual trial
#plot again after outlier removal:
ggplot(data, aes(RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
ggplot(data, aes(log_RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
ggplot(data, aes(sqrt_RT))  + geom_histogram(aes(y=..count..), colour="black", fill="white") + facet_wrap(~ Group)
#Calculate alpha desynchronisation by subtracting Pre-target Alpha from post target alpha
data$AlphaDesyncRH<-(data$PreAlphaPowerRH)-(data$PostAlphaPowerRH)
data$AlphaDesyncLH<-data$PreAlphaPowerLH-data$PostAlphaPowerLH
# Make PostAlpha contralateral (PostAlpha_c) and -Ipsilateral (PostAlpha_i) variables:
A<-data$Hemifield=="Left"
#Absolute post target alpha
data$PostAlpha_c[A]<-data$PostAlphaPowerRH[A]
data$PostAlpha_c[!A]<-data$PostAlphaPowerLH[!A]
data$PostAlpha_i[!A]<-data$PostAlphaPowerRH[!A]
data$PostAlpha_i[A]<-data$PostAlphaPowerLH[A]
#Post target Alpha desynchronisation
data$AlphaDesync_c[A]<-data$AlphaDesyncRH[A]
data$AlphaDesync_c[!A]<-data$AlphaDesyncLH[!A]
data$AlphaDesync_i[!A]<-data$AlphaDesyncRH[!A]
data$AlphaDesync_i[A]<-data$AlphaDesyncLH[A]
rm(A)
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#Rename participant_level columns of participant_level:
participant_level<- participant_level %>% #Rename data columns:
rename(.,
ValidPreAlphaTrials=V5,
ValidN2TrialsTrials=V6,
ValidCPPTrials=V7,
PreAlpha_LeftHemi=V8,
PreAlpha_RightHemi=V9,
N2c_LeftTarget_GA=V10,
N2c_RightTarget_GA=V11,
N2i_LeftTarget_GA=V12,
N2i_RightTarget_GA=V13,
AlphaDesync_LeftHemi_LeftTarget=V14,
AlphaDesync_LeftHemi_RightTarget=V15,
AlphaDesync_RightHemi_LeftTarget=V16,
AlphaDesync_RightHemi_RightTarget=V17,
CPPonset_LeftTarget=V18,
CPPonset_RightTarget=V19,
N2c_latency_LeftTarget=V20,
N2c_latency_RightTarget=V21,
N2i_latency_LeftTarget=V22,
N2i_latency_RightTarget=V23,
CPPslope_LeftTarget=V24,
CPPslope_RightTarget=V25,
FrontalNeg_slope_LeftTarget=V26,
FrontalNeg_slope_RightTarget=V27,
ADHD_Control=V28,
N2c_LeftTarget_PA=V29,
N2c_RightTarget_PA=V30,
N2i_LeftTarget_PA=V31,
N2i_RightTarget_PA=V32) %>% ##next calculate the ERP asymmetry measures:
mutate(.,
N2c_Asym_GA = (N2c_LeftTarget_GA-N2c_RightTarget_GA)/(N2c_LeftTarget_GA+N2c_RightTarget_GA),
N2i_Asym_GA = (N2i_LeftTarget_GA-N2i_RightTarget_GA)/(N2i_LeftTarget_GA+N2i_RightTarget_GA),
N2c_Asym_PA = (N2c_LeftTarget_PA-N2c_RightTarget_PA)/(N2c_LeftTarget_PA+N2c_RightTarget_PA),
N2i_Asym_PA = (N2i_LeftTarget_PA-N2i_RightTarget_PA)/(N2i_LeftTarget_PA+N2i_RightTarget_PA),
CPPonset_Asym = (CPPonset_LeftTarget-CPPonset_RightTarget)/(CPPonset_LeftTarget+CPPonset_RightTarget),
CPPslope_Asym = (CPPslope_LeftTarget-CPPslope_RightTarget)/(CPPslope_LeftTarget+CPPslope_RightTarget),
N2c_latency_Asym = (N2c_latency_LeftTarget-N2c_latency_RightTarget)/(N2c_latency_LeftTarget+N2c_latency_RightTarget),
N2i_latency_Asym =(N2i_latency_LeftTarget-N2i_latency_RightTarget)/(N2i_latency_LeftTarget+N2i_latency_RightTarget))
#NOTE: FOR N2c/i ,  the _GA or _PA suffix indicates whether N2c/i is measured with a measurement window based
#on Grand average (GA) peak N2c/i latency ,  or based on Participant level average (PA) peak N2c/i latency
#Merge Demographics into participant_level:
participant_level <- merge(participant_level, Demographics, by.x = "ID", by.y = "ID")
rm(Demographics)
participant_level<- participant_level %>%
mutate(.,
Group = ifelse(Group==1, "ADHD", "Control"),
Hand_SR_B= ifelse(Hand_SR_B==1, "Left", "Right"),
Gender= ifelse(Gender==1, "Male", "Female"),
DAT1_3UTR= ifelse(DAT1_3_Group==1, "non10repeat_homozygous", "10repeat_homozygous"),
DAT1_i8= ifelse(DAT1_i8_Group==1, "non6repeat_homozygous", "6repeat_homozygous")) %>%
mutate_each_(funs(factor), c("Group", "Gender", "Hand_SR_B", "DAT1_3_Group", "DAT1_i8_Group"))
#Look at Column names:
colnames(participant_level)
#Rename the full scale IQ, Edinburgh Handedness scale, reading for simplicity
participant_level$IQ<-participant_level$eFSIQ_B
participant_level$Handedness_Edinburgh<-participant_level$HQ_B
participant_level$Handedness_SelfReport<-participant_level$Hand_SR_B
participant_level$Reading <-participant_level$Read_Standard_B #WRAT Reading standard score (at time B)
participant_level$Age<-participant_level$Age_B
#add in accuracy
participant_level <- merge(participant_level, Accuracy_checker, by.x = "ID", by.y = "ID")
###Incorporate the demographic variables from participant_level into the single trial 'data' dataframe
target<-select(participant_level, ID, IQ, Handedness_Edinburgh, Handedness_SelfReport, Reading, Age, Gender, DAT1_3UTR, DAT1_i8,
Accuracy_Asym, Accuracy_Total, LeftFixBreak_percent, RightFixBreak_percent)
data<-merge(data, target, by.x="ID", by.y = "ID")
rm(target)
#Collapse each participant's RT single trials to participant level
RT_collapsed<- data %>%
filter(!LeftFixBreakneg100_100PR, !RightFixBreakneg100_100PR) %>%
group_by(ID, Hemifield) %>%
summarise(RT=mean(RT)) %>% #next bring Target-Hemifield up into wide format:
spread(Hemifield, RT) %>% #next rename
rename(RT_Left=Left, RT_Right=Right) %>% # next Calculate RT asymmetry:
mutate(RT_Asym=(RT_Left-RT_Right)/(RT_Left+RT_Right))
#Merge it in with the ERP measures
participant_level<-merge(participant_level, RT_collapsed, by.x = "ID", by.y = "ID")
############## Participant exclusion ####################
#Participant level
participant_level <- filter(participant_level,
Handedness_SelfReport == "Left",
ValidCPPTrials > 50,
LeftFixBreak_percent <55,
RightFixBreak_percent <55,
((Group=="ADHD" & CPRS_N_B >= 65) | (Group=="Control" & CPRS_N_B <= 60)))
######################################################################################
####Find outliers in the Participant level data (abs z-score >3)####
#################################################################
#Calculate Z scores inside measure_type type TO REMOVE OUTLIERS
#Z-score each participant's data inside measure_type ####
#calculate mean and sd
#Transform it to long format
participant_level_long<-participant_level %>%
select(ID, Group, RT_Left, RT_Right, RT_Asym,
PreAlpha_LeftHemi:N2i_latency_Asym) %>%
gather(measure_type, data, -ID, -Group) %>%
na.omit() %>%
mutate(Group_by_measure_type = interaction(.$Group, .$measure_type))  %>%
na.omit()
m <- tapply(participant_level_long$data, participant_level_long$Group_by_measure_type, mean, na.rm = T)
s <- tapply(participant_level_long$data, participant_level_long$Group_by_measure_type, sd, na.rm = T)
#calculate data.Z and save it inside participant_level_long
participant_level_long$data.Z <- (participant_level_long$data- m[participant_level_long$Group_by_measure_type])/s[participant_level_long$Group_by_measure_type]
participant_level_long<-participant_level_long %>% na.omit()
###Remove trials where absolute data.Z>3 (i.e. remove outlier RTs)
# participant_level_long<-participant_level_long[!abs(participant_level_long$data.Z)>3,]
###Shift extream outliers back to +/- 3 standard deviations from the mean
# participant_level_long$data[participant_level_long$data.Z>3]<-m[participant_level_long$Group_by_measure_type][participant_level_long$data.Z>3] + 3*s[participant_level_long$Group_by_measure_type][participant_level_long$data.Z>3]
# participant_level_long$data[participant_level_long$data.Z<(-3)]<-m[participant_level_long$Group_by_measure_type][participant_level_long$data.Z<(-3)] - 3*s[participant_level_long$Group_by_measure_type][participant_level_long$data.Z<(-3)]
#change measure_type to factor class
participant_level_long$Group_by_measure_type<-as.factor(participant_level_long$Group_by_measure_type)
#Put it back into wide format so I can use lapply to do t-test on columns
drops <- c("data.Z")
participant_level_long<-participant_level_long[ , !(names(participant_level_long) %in% drops)]
dan<-participant_level_long %>%
spread(Group_by_measure_type, data)
#Look for participant level outliers in RT and RT-asymmetry
#calculate RT_Asym.Z inside Group and save it
m <- tapply(participant_level$RT_Asym,participant_level$Group,mean, na.rm = T)
s <- tapply(participant_level$RT_Asym,participant_level$Group,sd, na.rm = T)
participant_level$RT_Asym.Z <- (participant_level$RT_Asym-m[participant_level$Group])/s[participant_level$Group]
#calculate RT_Left.Z inside Group and save it
m <- tapply(participant_level$RT_Left,participant_level$Group,mean, na.rm = T)
s <- tapply(participant_level$RT_Left,participant_level$Group,sd, na.rm = T)
participant_level$RT_Left.Z <- (participant_level$RT_Left-m[participant_level$Group])/s[participant_level$Group]
#calculate RT_Right.Z inside Group and save it
m <- tapply(participant_level$RT_Right,participant_level$Group,mean, na.rm = T)
s <- tapply(participant_level$RT_Right,participant_level$Group,sd, na.rm = T)
participant_level$RT_Right.Z <- (participant_level$RT_Right-m[participant_level$Group])/s[participant_level$Group]
#Kick out RT_Asym outliers
participant_level <- filter(participant_level,
abs(RT_Asym.Z)<3)
#Single trial
data <-data[data$ID %in% participant_level$ID, ]
#This ^ Excludes participants from the ADHD group due to clinical cuttoff CPRS_N_B >= 65
# AD69C', 'AD59C', 'AD27C', 'AD51C', 'AD98C'
#...and excludes  control participants due to clinical cuttoff CPRS_N_B CPRS_N_B <= 60
#'C14', 'C259' for filter_CPRS_N_B;
#....and also excludes C194 because this participant only had less than 50 valid trials for EEG
#...and also excludes AD11C and AD99C because they are right handed
#.....and excludes AD72C since he broke fixation towards the Left on 95% of left target trials
#.... and C62 was a significant outlier (abs Z>3) for RT_Asym
######################################################
#Save the participant level file as SPSS data folr
library(haven)
write_sav(participant_level, file.path(getwd(), "participant_level_data.sav"))
options(scipen=99)
Normality_tests <-participant_level %>%
select(contains("Left"), contains("Right"),
-contains("Accuracy"), -contains("FixBreak"),
-contains(".Z"))  %>%
gather() %>%
group_by(key) %>%
do(ShapiroWilk_p_value= shapiro.test(.$value)[2],
Anderson_Darling_p_value = nortest::ad.test(.$value)[2],
CramerVonMises_p_value = nortest::cvm.test(.$value)[2],
Shapiro_Francia_p_value = nortest::sf.test(.$value)[2],
Kolmogorov_Smirnov_p_value= nortest::lillie.test(.$value)[2]) %>%
mutate(ShapiroWilk_p_value= unlist(ShapiroWilk_p_value),
Anderson_Darling_p_value = unlist(Anderson_Darling_p_value),
CramerVonMises_p_value = unlist(CramerVonMises_p_value),
Shapiro_Francia_p_value = unlist(Shapiro_Francia_p_value),
Kolmogorov_Smirnov_p_value = unlist(Kolmogorov_Smirnov_p_value)) %>%
mutate(average_p_value=(ShapiroWilk_p_value +
Anderson_Darling_p_value +
CramerVonMises_p_value +
Shapiro_Francia_p_value +
Kolmogorov_Smirnov_p_value)/5) %>% arrange(average_p_value)
kable(Normality_tests,
format.args = list(big.mark = ","), digits=4,
caption="Normality tests")
ANOVA_data<- participant_level %>%
select(ID,Group, RT_Left, RT_Right) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)
Group_by_Hemifield_ANOVA <- ezANOVA(data = ANOVA_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
, within_covariates = NULL
, between = Group
, between_covariates = NULL
, observed = NULL
, type = 3)
print("Repeated Measures ANOVA  for the Group*Hemifield effect on RT:")
print(Group_by_Hemifield_ANOVA);
kable(ANOVA_data %>% group_by(Hemifield) %>% summarise(mean=mean(dv),sd=sd(dv)))
log <- capture.output({
Group_by_Hemifield_Perm <- ezPerm(data = Perm_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
, between=Group
, perms = 1000);
})
print("Factorial Permutation test for the Group*Hemifield effect on RT:")
print(Group_by_Hemifield_Perm);
Perm_data<- participant_level %>%
select(ID,Group, RT_Left, RT_Right) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)%>%
mutate(Hemifield=factor(Hemifield)) %>%
mutate(ID=factor(ID))
log <- capture.output({
Group_by_Hemifield_Perm <- ezPerm(data = Perm_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
, between=Group
, perms = 1000);
})
print("Factorial Permutation test for the Group*Hemifield effect on RT:")
print(Group_by_Hemifield_Perm);
options(scipen=99)
Normality_tests <-participant_level %>%
select(contains("Left"), contains("Right"),
-contains("Accuracy"), -contains("FixBreak"),
-contains(".Z"))  %>%
gather() %>%
group_by(key) %>%
do(ShapiroWilk_p_value= shapiro.test(.$value)[2],
Anderson_Darling_p_value = nortest::ad.test(.$value)[2],
CramerVonMises_p_value = nortest::cvm.test(.$value)[2],
Shapiro_Francia_p_value = nortest::sf.test(.$value)[2],
Kolmogorov_Smirnov_p_value= nortest::lillie.test(.$value)[2]) %>%
mutate(ShapiroWilk_p_value= unlist(ShapiroWilk_p_value),
Anderson_Darling_p_value = unlist(Anderson_Darling_p_value),
CramerVonMises_p_value = unlist(CramerVonMises_p_value),
Shapiro_Francia_p_value = unlist(Shapiro_Francia_p_value),
Kolmogorov_Smirnov_p_value = unlist(Kolmogorov_Smirnov_p_value)) %>%
mutate(average_p_value=(ShapiroWilk_p_value +
Anderson_Darling_p_value +
CramerVonMises_p_value +
Shapiro_Francia_p_value +
Kolmogorov_Smirnov_p_value)/5) %>% arrange(average_p_value)
kable(Normality_tests,
format.args = list(big.mark = ","), digits=4,
caption="Normality tests")
ggplot(ANOVA_data, aes(Hemifield, dv, colour = Hemifield))  +
geom_violin() +
geom_boxplot(alpha=0.1) +
theme_bw () +
geom_point() +
xlab("Target Hemifield") + ylab("Reaction Time (ms)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
coord_flip()
ggplot(ANOVA_data, aes(Hemifield, dv, colour = Hemifield))  +
geom_violin() +
geom_boxplot(alpha=0.1) +
theme_bw () +
geom_point() +
xlab("Target Hemifield") + ylab("Reaction Time (ms)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
coord_flip() +
facet_wrap(~Group)
ANOVA_data<- participant_level %>%
select(ID,Group, CPPonset_LeftTarget, CPPonset_RightTarget) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)
Group_by_Hemifield_ANOVA <- ezANOVA(data = ANOVA_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
, within_covariates = NULL
, between = Group
, between_covariates = NULL
, observed = NULL
, type = 3);
print("Repeated Measures ANOVA  for the Group*Hemifield effect on CPP Onset:")
print(Group_by_Hemifield_ANOVA);
ggplot(ANOVA_data, aes(Hemifield, dv, colour = Hemifield))  +
geom_violin() +
geom_boxplot(alpha=0.1) +
theme_bw () +
geom_point() +
xlab("Target Hemifield") + ylab("CPP Onset (ms)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ANOVA_data, aes(Hemifield, dv, colour = Hemifield))  +
geom_violin() +
geom_boxplot(alpha=0.1) +
theme_bw () +
geom_point() +
xlab("Target Hemifield") + ylab("CPP Onset (ms)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+
coord_flip() +
facet_wrap(~Group)
###################################################################
ANOVA_data<- participant_level %>%
select(ID,Group, CPPslope_LeftTarget, CPPslope_RightTarget) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)
#Permutation test:
Perm_data<- participant_level %>%
select(ID,Group, CPPonset_LeftTarget, CPPonset_RightTarget) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)
log <- capture.output({
Group_by_Hemifield_Perm <- ezPerm(data = Perm_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
,between=Group, perms = 1000);
})
print("Factorial Permutation test for the Group*Hemifield effect on CPP Onset:")
print(Group_by_Hemifield_Perm);
ANOVA_data<- participant_level %>%
select(ID, Group, N2c_LeftTarget_PA, N2c_RightTarget_PA, N2i_LeftTarget_PA, N2i_RightTarget_PA) %>%
na.omit() %>%
gather(condition, dv, -ID, -Group) %>%
mutate(Hemifield = replace(condition, condition=="N2c_LeftTarget_PA" | condition=="N2i_LeftTarget_PA", "Left")) %>%
mutate(Hemifield = replace(Hemifield, condition=="N2c_RightTarget_PA" | condition=="N2i_RightTarget_PA", "Right")) %>%
mutate(Hemisphere = replace(condition, condition=="N2i_LeftTarget_PA" | condition=="N2i_RightTarget_PA", "Ipsilateral")) %>%
mutate(Hemisphere = replace(Hemisphere, condition=="N2c_LeftTarget_PA" | condition=="N2c_RightTarget_PA", "Contralateral")) %>%
as.data.frame()
Hemifield_Hemisphere_ANOVA <- ezANOVA(data = ANOVA_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield, Hemisphere)
, within_covariates = NULL
, between = Group
, between_covariates = NULL
, observed = NULL
, type = 3);
print("Repeated Measures ANOVA for the effects of Hemifield*Hemisphere on N2_PA Amplitude:")
print(Hemifield_Hemisphere_ANOVA);
ANOVA_data<- participant_level %>%
select(ID, Group, N2c_LeftTarget_GA, N2c_RightTarget_GA, N2i_LeftTarget_GA, N2i_RightTarget_GA) %>%
na.omit() %>%
gather(condition, dv, -ID, -Group) %>%
mutate(Hemifield = replace(condition, condition=="N2c_LeftTarget_GA" | condition=="N2i_LeftTarget_GA", "Left")) %>%
mutate(Hemifield = replace(Hemifield, condition=="N2c_RightTarget_GA" | condition=="N2i_RightTarget_GA", "Right")) %>%
mutate(Hemisphere = replace(condition, condition=="N2i_LeftTarget_GA" | condition=="N2i_RightTarget_GA", "Ipsilateral")) %>%
mutate(Hemisphere = replace(Hemisphere, condition=="N2c_LeftTarget_GA" | condition=="N2c_RightTarget_GA", "Contralateral")) %>%
as.data.frame()
Hemifield_Hemisphere_ANOVA <- ezANOVA(data = ANOVA_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield, Hemisphere)
, within_covariates = NULL
, between = Group
, between_covariates = NULL
, observed = NULL
, type = 3);
print("Repeated Measures ANOVA for the effects of Hemifield*Hemisphere on N2_GA Amplitude:")
print(Hemifield_Hemisphere_ANOVA);
ANOVA_data<- participant_level %>%
select(ID,Group, PreAlpha_LeftHemi, PreAlpha_RightHemi) %>%
na.omit() %>%
gather(Hemisphere, dv, -ID, -Group)
Hemisphere_ANOVA <- ezANOVA(data = ANOVA_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemisphere)
, within_covariates = NULL
, between = Group
, between_covariates = NULL
, observed = NULL
, type = 3);
print("Repeated Measures ANOVA  for the effect of Hemisphere on Pre-target Alpha Power:")
print(Hemisphere_ANOVA);
kable(ANOVA_data %>% group_by(Hemisphere) %>% summarise(mean=mean(dv),sd=sd(dv)))
Perm_data<- participant_level %>%
select(ID,Group, PreAlpha_LeftHemi, PreAlpha_RightHemi) %>%
na.omit() %>%
gather(Hemisphere, dv, -ID, -Group)
log <- capture.output({
Hemisphere_Perm <- ezPerm(data = Perm_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemisphere)
, between=Group,
perms = 1000);
})
print("Factorial Permutation test for the effect of Hemisphere on Pre-target Alpha Power:")
print(Hemisphere_Perm);
kable(ANOVA_data %>% group_by(Group, Hemisphere) %>% summarise(mean=mean(dv),sd=sd(dv)))
ggplot(ANOVA_data, aes(Hemisphere, dv, colour = Hemisphere))  +
geom_violin() +
geom_boxplot(alpha=0.1) +
geom_point() +
xlab("Hemisphere") + ylab("Alpha Power (uV)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(face="bold", angle=0, size=12),
panel.background = element_blank()) +
guides(colour=FALSE) +
scale_x_discrete(labels=c("Left", "Right")) +
facet_wrap(~Group)
t.test(participant_level$RT_Asym ~ participant_level$Group)
# Density plot
ggplot(participant_level, aes(RT_Asym, fill=Group))  + geom_density(alpha=.4) +
geom_vline(data=participant_level %>%
group_by(Group) %>%
summarise(RT_Asym.mean=mean(RT_Asym)),
aes(xintercept=RT_Asym.mean,  colour=Group),
linetype="dashed", size=1)
##Try permutated t-test
log <- capture.output({
RTasym_Group <- ezPerm(data = participant_level
, dv = .(RT_Asym)
, wid = .(ID)
, between = .(Group)
,between=Group, perms = 1000
)
})
print("Factorial Permutation test for the effect of Group on RT_Asym:")
print(RTasym_Group);
##Try Group * Hemifield interaction on RT (rather than using RT-asym)
#So get participant level RT into long format so I can run permutated mixed model anova
Perm_data<- participant_level %>%
select(ID,Group, RT_Left, RT_Right, Group) %>%
na.omit() %>%
gather(Hemifield, dv, -ID, -Group)%>%
mutate(Hemifield=factor(Hemifield)) %>%
mutate(ID=factor(ID))
log <- capture.output({
Group_by_Hemifield_Perm <- ezPerm(data = Perm_data
, dv = .(dv)
, wid = .(ID)
, within = .(Hemifield)
, between = .(Group)
,between=Group, perms = 1000);
})
print("Factorial Permutation test for the Group*Hemifield effect on RT:")
print(Group_by_Hemifield_Perm);
